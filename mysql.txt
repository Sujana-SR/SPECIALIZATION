[09:46] manisha (Guest)
CREATE TABLE IF NOT EXISTS newauthor(aut_id varchar(8) NOT NULL,     aut_name varchar(50) NOT NULL,   country varchar(25) NOT NULL,     home_city varchar(25) NOT NULL );

[09:57] manisha (Guest)
CREATE TABLE IF NOT EXISTS newbook_mast (book_id varchar(15) NOT NULL UNIQUE,          book_name varchar(50)  ,           isbn_no varchar(15)  NOT NULL UNIQUE  ,           cate_id varchar(8)  ,             aut_id varchar(8) ,             pub_id varchar(8) ,            dt_of_pub date ,             pub_lang varchar(15) ,           no_page decimal(5,0) CHECK(no_page>0) ,            book_price decimal(8,2) ,             PRIMARY KEY (book_id)               );

INSERT INTO account VALUES('A00001','C00001','B00001',1000,'2012-12-
15','Saving','Active');
INSERT INTO account VALUES('A00002','C00002','B00001',1000,'2012-06-12','Saving','Active');
INSERT INTO account VALUES('A00003','C00003','B00002',1000,'2012-05-17','Saving','Active');
INSERT INTO account VALUES('A00004','C00002','B00005',1000,'2013-01-27','Saving','Active');
INSERT INTO account VALUES('A00005','C00006','B00006',1000,'2012-12-17','Saving','Active');
INSERT INTO account VALUES('A00006','C00007','B00007',1000,'2010-08-12','Saving','Suspended');
INSERT INTO account VALUES('A00007','C00007','B00001',1000,'2012-10-02','Saving','Active');
INSERT INTO account VALUES('A00008','C00001','B00003',1000,'2009-11-09','Saving','Terminated');
INSERT INTO account VALUES('A00009','C00003','B00007',1000,'2008-11-30','Saving','Terminated');
INSERT INTO account VALUES('A00010','C00004','B00002',1000,'2013-03-01','Saving','Active');



INSERT INTO trandetails VALUES('T00001','A00001','2013-01-01','Cheque','Deposit',2000);
INSERT INTO trandetails VALUES('T00002','A00001','2013-02-01','Cash','Withdrawal',1000);
INSERT INTO trandetails VALUES('T00003','A00002','2013-01-01','Cash','Deposit',2000);
INSERT INTO trandetails VALUES('T00004','A00002','2013-02-01','Cash','Deposit',3000);
INSERT INTO trandetails VALUES('T00005','A00007','2013-01-11','Cash','Deposit',7000);
INSERT INTO trandetails VALUES('T00006','A00007','2013-01-13','Cash','Deposit',9000);
INSERT INTO trandetails VALUES('T00007','A00001','2013-03-13','Cash','Deposit',4000);
INSERT INTO trandetails VALUES('T00008','A00001','2013-03-14','Cheque','Deposit',3000);
INSERT INTO trandetails VALUES('T00009','A00001','2013-03-21','Cash','Withdrawal',9000);
INSERT INTO trandetails VALUES('T00010','A00001','2013-03-22','Cash','Withdrawal',2000);
INSERT INTO trandetails VALUES('T00011','A00002','2013-03-25','Cash','Withdrawal',7000);
INSERT INTO trandetails VALUES('T00012','A00007','2013-03-26','Cash','Withdrawal',2000);



--------------------------------------------------------------------------------------
Write difference between Primary key and Foreign key
CREATE TABLE customer
 (
 custid VARCHAR(6),
 fname VARCHAR(30),
 mname VARCHAR(30),
 ltname VARCHAR(30),
 city VARCHAR(15),
 mobileno VARCHAR(10),
 occupation VARCHAR(10),
 dob DATE,
 CONSTRAINT customer_custid_pk PRIMARY KEY(custid) 
 ); 
 CREATE TABLE branch
 (
 bid VARCHAR(6),
 bname VARCHAR(30),
 bcity VARCHAR(30),
 CONSTRAINT branch_bid_pk PRIMARY KEY(bid) 
 );
CREATE TABLE account
 (
 acnumber VARCHAR(6),
 custid VARCHAR(6),
 bid VARCHAR(6),
 opening_balance INT(7),
 aod DATE,
 atype VARCHAR(10),
 astatus VARCHAR(10),
 CONSTRAINT account_acnumber_pk PRIMARY KEY(acnumber),
 CONSTRAINT account_custid_fk FOREIGN KEY(custid) REFERENCES
customer(custid),
 CONSTRAINT account_bid_fk FOREIGN KEY(bid) REFERENCES
branch(bid) 
 );
CREATE TABLE trandetails
 ( 
 tnumber VARCHAR(6),
 acnumber VARCHAR(6),
 dot DATE,
 medium_of_transaction VARCHAR(20),
 transaction_type VARCHAR(20),
 transaction_amount INT(7), 
 CONSTRAINT trandetails_tnumber_pk PRIMARY KEY(tnumber),
 CONSTRAINT trandetails_acnumber_fk FOREIGN KEY(acnumber)
REFERENCES account(acnumber) 
 );
CREATE TABLE loan
 (
 
 custid VARCHAR(6),
 bid VARCHAR(6),
 loan_amount INT(7),
 CONSTRAINT loan_customer_custid_bid_pk PRIMARY KEY(custid,bid),
 CONSTRAINT loan_custid_fk FOREIGN KEY(custid) REFERENCES 
customer(custid),
 CONSTRAINT loan_bid_fk FOREIGN KEY(bid) REFERENCES branch(bid)
 );





--Records for the bank customers
INSERT INTO customer
VALUES('C00001','Ramesh','Chandra','Sharma','Delhi','9543198345','Serv
ice','1976-12-06');
INSERT INTO customer
VALUES('C00002','Avinash','Sunder','Minha','Delhi','9876532109','Servi
ce','1974-10-16');
INSERT INTO customer
VALUES('C00003','Rahul',null,'Rastogi','Delhi','9765178901','Student',
'1981-09-26');
INSERT INTO customer
VALUES('C00004','Parul',null,'Gandhi','Delhi','9876532109','Housewife'
,'1976-11-03');
INSERT INTO customer
VALUES('C00005','Naveen','Chandra','Aedekar','Mumbai','8976523190','Se
rvice','1976-09-19');
INSERT INTO customer
VALUES('C00006','Chitresh',null,'Barwe','Mumbai','7651298321','Student
','1992-11-06');
INSERT INTO customer
VALUES('C00007','Amit','Kumar','Borkar','Mumbai','9875189761','Student
','1981-09-06');
INSERT INTO customer
VALUES('C00008','Nisha',null,'Damle','Mumbai','7954198761','Service','
1975-12-03');
INSERT INTO customer
VALUES('C00009','Abhishek',null,'Dutta','Kolkata','9856198761','Servic
e','1973-05-22');
INSERT INTO customer 
VALUES('C00010','Shankar',null,'Nair','Chennai','8765489076','Service'
,'1976-07-12');
--Records for the bank branches
INSERT INTO branch VALUES('B00001','Asaf ali road','Delhi');
INSERT INTO branch VALUES('B00002','New delhi main branch','Delhi');
INSERT INTO branch VALUES('B00003','Delhi cantt','Delhi');
INSERT INTO branch VALUES('B00004','Jasola','Delhi');
INSERT INTO branch VALUES('B00005','Mahim','Mumbai');
INSERT INTO branch VALUES('B00006','Vile parle','Mumbai');
INSERT INTO branch VALUES('B00007','Mandvi','Mumbai');
INSERT INTO branch VALUES('B00008','Jadavpur','Kolkata');
INSERT INTO branch VALUES('B00009','Kodambakkam','Chennai');
--Records for account master
INSERT INTO account VALUES('A00001','C00001','B00001',1000,'2012-12-
15','Saving','Active');
INSERT INTO account VALUES('A00002','C00002','B00001',1000,'2012-06-
12','Saving','Active');
INSERT INTO account VALUES('A00003','C00003','B00002',1000,'2012-05-
17','Saving','Active');
INSERT INTO account VALUES('A00004','C00002','B00005',1000,'2013-01-
27','Saving','Active');
INSERT INTO account VALUES('A00005','C00006','B00006',1000,'2012-12-
17','Saving','Active');
INSERT INTO account VALUES('A00006','C00007','B00007',1000,'2010-08-
12','Saving','Suspended');
INSERT INTO account VALUES('A00007','C00007','B00001',1000,'2012-10-
02','Saving','Active');
INSERT INTO account VALUES('A00008','C00001','B00003',1000,'2009-11-
09','Saving','Terminated');
INSERT INTO account VALUES('A00009','C00003','B00007',1000,'2008-11-
30','Saving','Terminated');
INSERT INTO account VALUES('A00010','C00004','B00002',1000,'2013-03-
01','Saving','Active');
--Records for transaction details
INSERT INTO trandetails VALUES('T00001','A00001','2013-01-
01','Cheque','Deposit',2000);
INSERT INTO trandetails VALUES('T00002','A00001','2013-02-
01','Cash','Withdrawal',1000);
INSERT INTO trandetails VALUES('T00003','A00002','2013-01-
01','Cash','Deposit',2000);
INSERT INTO trandetails VALUES('T00004','A00002','2013-02-
01','Cash','Deposit',3000);
INSERT INTO trandetails VALUES('T00005','A00007','2013-01-
11','Cash','Deposit',7000);
INSERT INTO trandetails VALUES('T00006','A00007','2013-01-
13','Cash','Deposit',9000);
INSERT INTO trandetails VALUES('T00007','A00001','2013-03-
13','Cash','Deposit',4000);
INSERT INTO trandetails VALUES('T00008','A00001','2013-03-
14','Cheque','Deposit',3000);
INSERT INTO trandetails VALUES('T00009','A00001','2013-03-
21','Cash','Withdrawal',9000);
INSERT INTO trandetails VALUES('T00010','A00001','2013-03-
22','Cash','Withdrawal',2000);
INSERT INTO trandetails VALUES('T00011','A00002','2013-03-
25','Cash','Withdrawal',7000);
INSERT INTO trandetails VALUES('T00012','A00007','2013-03-
26','Cash','Withdrawal',2000);
--Records for loan details
INSERT INTO loan VALUES('C00001','B00001',100000);
INSERT INTO loan VALUES('C00002','B00002',200000);
INSERT INTO loan VALUES('C00009','B00008',400000);
INSERT INTO loan VALUES('C00010','B00009',500000);
INSERT INTO loan VALUES('C00001','B00003',600000);
INSERT INTO loan VALUES('C00002','B00001',600000);
-----------------------------------------------------------------------

                               Mysql.pdf question and solutions



Problem #1:
Write a query to display the customer number , firstname, customer’s
date of birth . Display in a sorted order of date of birth year and
within that sort by firstname.

Ans:- select custid,fname,dob from customer order by dob ,fname asc;
--------------
Problem #2:
Write a query to display customer’s number, first name and middle
name. The customer’s who don’t have middle name, for them display the
last name. Give the alias name as Cust_Name.

Ans:- select custid,concat(concat(fname,' '),coalesce(mname,ltname))as Cust_Name from customer;

-----------------
Problem#3:
Write a query to display account number, customer’s number, customer’s
firstname,lastname,account opening date.

Ans:-select a.custid,c.fname,c.ltname,a.aod
          from customer c,account a
          where a.custid=c.custid;

------------------
Problem # 4:
Write a query to display the number of customer’s from Delhi. Give the
count an alias name of Cust_Count.

Ans:-select count(custid) as cust_count from customer where city='Delhi';

---------------
Problem # 5:
Write a query to display the customer number, customer
firstname,account number for the customer’s whose accounts were
created after 15th of any month.

Ans:- select a.custid,c.fname,a.acnumber from account a,customer c where a.custid=c.custid and day(aod)>15;

--------------
Problem # 6:
Write a query to display the customer number, firstname, lastname for
those client where total loan amount taken is maximum and at least
taken from 2 banks. 
For example the customer C00012 took a loan of 100000 from bank
branch with id B00009 and 
C00012 Took a loan of 500000 from bank
branch with id B00010. 
So total loan amount for customer
C00012 is 600000. 
C00013 took a loan of 100000 from bank
branch B00009 and 200000 from bank branch B00011.
So total loan taken is 300000. 
So loan taken by C00012 is more then
C00013.

Ans:-

---------------------
Problem # 7:
Write a query to display all those account number, deposit, withdrawal
where withdrawal is more than deposit amount. 
For example A00011 deposited 2000 rupees on 2012-12-01 and 3000 rupees
on 2012-12-02. The same account i.e A00011 withdrawn 3000 rupees on
2013-01-01 and 7000 rupees on 2013-01-03. So the total deposited
amount is 5000 and total withdrawal amount is 10000. So withdrawal
amount is more then deposited for account number A00011.

Ans:-


------------------------------------------------------------------------------
     


                        MYSQL QUERY PRACT.pdf QUESTION AND SOLUTIONS.    




Problem#1
display customer name,customer id who have issued max and min no.of
movies
Problem #2
display id,name,mobile num and description of all customers.if 
mobile num is not available then display address as alias contact,for 
those who does't have library cards display null as description
Problem #3
display customer details and movie id for those who issued same movie
more than one time OR
//dislay customer details who watched same movie more than once
Problem #4
display customer information those who has library cards
Problem #5
display the members who watch the movie but doesnt have card
Prblem #6
display sr no as 2 digits of issue id,emp id,movie watched,video id 
and sort by sr no
Problem #7
display total revenue spent on videos by each customer


                                    ----ANS----

SELECT
customer_name, a.customer_id
FROM
customer_issue_details a,
customer_master b
WHERE
a.customer_id = b.customer_id
GROUP BY a.customer_id
HAVING COUNT(a.movie_id) = (SELECT
MIN(a.count) min
FROM
(SELECT
customer_id, COUNT(movie_id) count
FROM
customer_issue_details
GROUP BY customer_id) a)
OR COUNT(a.movie_id) = (SELECT
MAX(b.count) min
FROM
(SELECT
customer_id, COUNT(movie_id) count
FROM
customer_issue_details
GROUP BY customer_id) b);


select a.customer_id,a.customer_name,coalesce
(a.contact_no,a.contact_add) contact,description
from customer_master
a,library_card_master b,customer_card_details c
where
a.customer_id=c.customer_id and c.card_id=b.card_id union
select
a.customer_id,a.customer_name,coalesce(a.contact_no,a.contact_add)
contact,null as description
from customer_master a
where customer_id not
in (select customer_id from customer_card_details) ;



select m.customer_id,customer_name,movie_id,count(i.movie_id) as
count_of_movie
from customer_master m join customer_issue_details i
on m.customer_id = i.customer_id
group by movie_id
having count(movie_id)>1;



select a.customer_id,customer_name
from customer_card_details
a,customer_master b,library_card_master c
where
a.customer_id=b.customer_id and a.card_id=c.card_id;



select distinct b.customer_id,customer_name
from
customer_issue_details a,customer_master b
where
a.customer_id=b.customer_id
and a.customer_id not in (select
customer_id from customer_card_details);



select substring(issue_id,4) sr_no,issue_id as
video_id,customer_id,movie_id
from customer_issue_details order by
sr_no;



select a.customer_id,count(a.movie_id)*c.rent_cost rent
from
customer_issue_details a,customer_master b ,(select
movie_id,rent_cost
from movies_master) c
where a.customer_id=b.customer_id and
a.movie_id=c.movie_id
group by b.customer_id union
select customer_id,0
as rent
from customer_master
where customer_id not in(select
customer_id from customer_issue_details);

----------------------------------------------------------------------------------------------------------------
                                                      DAY 02 OF MYSQL

create database db2;
use db2;

create table country(countryid int,countryname varchar(40));desc country;insert into country values(1,"India");insert into country values(2,"Indonisia");insert into country values(3,"Iceland");select * from country;create table countryarchive(countryid int,countryname varchar(40));insert into `countryarchive` select * from `country`;select * from countryarchive;

---------------------------
create database world;
use world;
create table members(name varchar(40),age int,gender varchar(40));desc members;insert into members values('kaviya',21,'Female');insert into members values('kavin',21,'male');insert into members values('kavitha',21,'Female');insert into members values('kaboor',21,'male');insert into members values('krishna',22,'female');insert into members values('kanna',23,'male');select * from members;select * from members group by age,gender;

select gender, count(`name`) from members group by gender;

update members set name='kaviyapriya' where name='kaviya';
select * from members where name like '%a';
select * from members where name like 's%';
select * from members where name like '_r%';

----------------------------------exercises------------------------------

1. Write a SQL statement to create a simple table countries including columns country_id,country_name and region_id.

ans:- CREATE TABLE countries( 
COUNTRY_ID varchar(2),
COUNTRY_NAME varchar(40),
REGION_ID decimal(10,0)
);


2. Write a SQL statement to create a simple table countries including columns country_id,country_name and region_id which is already exists.

ans:- CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2),
COUNTRY_NAME varchar(40),
REGION_ID decimal(10,0)
);


3. Write a SQL statement to create the structure of a table dup_countries similar to countries.

ans:- CREATE TABLE IF NOT EXISTS dup_countries
LIKE countries;

4. Write a SQL statement to create a duplicate copy of countries table including structure and data by name dup_countries.

ans:- 
CREATE TABLE IF NOT EXISTS dup_countries
AS SELECT * FROM  countries;

5. Write a SQL statement to create a table countries set a constraint NULL.
ans:-
CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2) NOT NULL,
COUNTRY_NAME varchar(40) NOT NULL,
REGION_ID decimal(10,0) NOT NULL
);

6. Write a SQL statement to create a table named jobs including columns job_id, job_title, min_salary, max_salary and check whether the max_salary amount exceeding the upper limit 25000.

ans:-
CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID varchar(10) NOT NULL , 
JOB_TITLE varchar(35) NOT NULL, 
MIN_SALARY decimal(6,0), 
MAX_SALARY decimal(6,0) 
CHECK(MAX_SALARY<=25000)
);

7. Write a SQL statement to create a table named countries including columns country_id, country_name and region_id and make sure that no countries except Italy, India and China will be entered in the table.

ans:-
CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2),
COUNTRY_NAME varchar(40)
CHECK(COUNTRY_NAME IN('Italy','India','China')) ,
REGION_ID decimal(10,0)
);


8. Write a SQL statement to create a table named job_histry including columns employee_id, start_date, end_date, job_id and department_id and make sure that the value against column end_date will be entered at the time of insertion to the format like '--/--/----'.

ans:-
CREATE TABLE IF NOT EXISTS job_history ( 
EMPLOYEE_ID decimal(6,0) NOT NULL, 
START_DATE date NOT NULL, 
END_DATE date NOT NULL
CHECK (END_DATE LIKE '--/--/----'), 
JOB_ID varchar(10) NOT NULL, 
DEPARTMENT_ID decimal(4,0) NOT NULL 
);


9. Write a SQL statement to create a table named countries including columns country_id,country_name and region_id and make sure that no duplicate data against column country_id will be allowed at the time of insertion.

ans:-
CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2) NOT NULL,
COUNTRY_NAME varchar(40) NOT NULL,
REGION_ID decimal(10,0) NOT NULL,
UNIQUE(COUNTRY_ID)
);

10. Write a SQL statement to create a table named jobs including columns job_id, job_title, min_salary and max_salary, and make sure that, the default value for job_title is blank and min_salary is 8000 and max_salary is NULL will be entered automatically at the time of insertion if no value assigned for the specified columns.

ans:-
CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID varchar(10) NOT NULL UNIQUE, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT NULL
);

11. Write a SQL statement to create a table named countries including columns country_id, country_name and region_id and make sure that the country_id column will be a key field which will not contain any duplicate data at the time of insertion.

ans:-
CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2) NOT NULL UNIQUE PRIMARY KEY,
COUNTRY_NAME varchar(40) NOT NULL,
REGION_ID decimal(10,0) NOT NULL
);

12. Write a SQL statement to create a table countries including columns country_id, country_name and region_id and make sure that the column country_id will be unique and store an auto incremented value.

ans:-
CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID integer NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY,
COUNTRY_NAME varchar(40) NOT NULL,
REGION_ID decimal(10,0) NOT NULL
);
DESC countries;

13. Write a SQL statement to create a table countries including columns country_id, country_name and region_id and make sure that the combination of columns country_id and region_id will be unique.
ans:-
CREATE TABLE IF NOT EXISTS countries (
COUNTRY_ID varchar(2) NOT NULL UNIQUE DEFAULT '',
COUNTRY_NAME varchar(40) DEFAULT NULL,
REGION_ID decimal(10,0) NOT NULL,
PRIMARY KEY (COUNTRY_ID,REGION_ID));

14. Write a SQL statement to create a table job_history including columns employee_id, start_date, end_date, job_id and department_id and make sure that, the employee_id column does not contain any duplicate value at the time of insertion and the foreign key column job_id contain only those values which are exists in the jobs table.

Here is the structure of the table jobs;

+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| JOB_ID     | varchar(10)  | NO   | PRI |         |       |
| JOB_TITLE  | varchar(35)  | NO   |     | NULL    |       |
| MIN_SALARY | decimal(6,0) | YES  |     | NULL    |       |
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+

ans:-
CREATE TABLE job_history ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
START_DATE date NOT NULL, 
END_DATE date NOT NULL, 
JOB_ID varchar(10) NOT NULL, 
DEPARTMENT_ID decimal(4,0) DEFAULT NULL, 
FOREIGN KEY (job_id) REFERENCES jobs(job_id)
)ENGINE=InnoDB;

15. Write a SQL statement to create a table employees including columns employee_id, first_name, last_name, email, phone_number hire_date, job_id, salary, commission, manager_id and department_id and make sure that, the employee_id column does not contain any duplicate value at the time of insertion and the foreign key columns combined by department_id and manager_id columns contain only those unique combination values, which combinations are exists in the departments table.

Assume the structure of departments table below.

+-----------------+--------------+------+-----+---------+-------+
| Field           | Type         | Null | Key | Default | Extra |
+-----------------+--------------+------+-----+---------+-------+
| DEPARTMENT_ID   | decimal(4,0) | NO   | PRI | 0       |       |
| DEPARTMENT_NAME | varchar(30)  | NO   |     | NULL    |       |
| MANAGER_ID      | decimal(6,0) | NO   | PRI | 0       |       |
| LOCATION_ID     | decimal(4,0) | YES  |     | NULL    |       |
+-----------------+--------------+------+-----+---------+-------+
ans:-
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
EMAIL varchar(25) NOT NULL, 
PHONE_NUMBER varchar(20) DEFAULT NULL, 
HIRE_DATE date NOT NULL, 
JOB_ID varchar(10) NOT NULL, 
SALARY decimal(8,2) DEFAULT NULL, 
COMMISSION_PCT decimal(2,2) DEFAULT NULL, 
MANAGER_ID decimal(6,0) DEFAULT NULL, 
DEPARTMENT_ID decimal(4,0) DEFAULT NULL, 
FOREIGN KEY(DEPARTMENT_ID,MANAGER_ID) 
REFERENCES  departments(DEPARTMENT_ID,MANAGER_ID)
)ENGINE=InnoDB;


16. Write a SQL statement to create a table employees including columns employee_id, first_name, last_name, email, phone_number hire_date, job_id, salary, commission, manager_id and department_id and make sure that, the employee_id column does not contain any duplicate value at the time of insertion, and the foreign key column department_id, reference by the column department_id of departments table, can contain only those values which are exists in the departments table and another foreign key column job_id, referenced by the column job_id of jobs table, can contain only those values which are exists in the jobs table. The InnoDB Engine have been used to create the tables.

"A foreign key constraint is not required merely to join two tables. For storage engines other than InnoDB, it is possible when defining a column to use a REFERENCES tbl_name(col_name) clause, which has no actual effect, and serves only as a memo or comment to you that the column which you are currently defining is intended to refer to a column in another table." - Reference dev.mysql.com

Assume that the structure of two tables departments and jobs.

+-----------------+--------------+------+-----+---------+-------+
| Field           | Type         | Null | Key | Default | Extra |
+-----------------+--------------+------+-----+---------+-------+
| DEPARTMENT_ID   | decimal(4,0) | NO   | PRI | 0       |       |
| DEPARTMENT_NAME | varchar(30)  | NO   |     | NULL    |       |
| MANAGER_ID      | decimal(6,0) | YES  |     | NULL    |       |

| LOCATION_ID     | decimal(4,0) | YES  |     | NULL    |       |
+-----------------+--------------+------+-----+---------+-------+


+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| JOB_ID     | varchar(10)  | NO   | PRI |         |       |
| JOB_TITLE  | varchar(35)  | NO   |     | NULL    |       |
| MIN_SALARY | decimal(6,0) | YES  |     | NULL    |       |
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+

ans:-
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
EMAIL varchar(25) NOT NULL, 
PHONE_NUMBER varchar(20) DEFAULT NULL, 
HIRE_DATE date NOT NULL, 
JOB_ID varchar(10) NOT NULL, 
SALARY decimal(8,2) DEFAULT NULL, 
COMMISSION_PCT decimal(2,2) DEFAULT NULL, 
MANAGER_ID decimal(6,0) DEFAULT NULL, 
DEPARTMENT_ID decimal(4,0) DEFAULT NULL, 
FOREIGN KEY(DEPARTMENT_ID) 
REFERENCES  departments(DEPARTMENT_ID),
FOREIGN KEY(JOB_ID) 
REFERENCES  jobs(JOB_ID)
)ENGINE=InnoDB;





17. Write a SQL statement to create a table employees including columns employee_id, first_name, last_name, job_id, salary and make sure that, the employee_id column does not contain any duplicate value at the time of insertion, and the foreign key column job_id, referenced by the column job_id of jobs table, can contain only those values which are exists in the jobs table. The InnoDB Engine have been used to create the tables. The specialty of the statement is that, The ON UPDATE CASCADE action allows you to perform cross-table update and ON DELETE RESTRICT action reject the deletion. The default action is ON DELETE RESTRICT.

Assume that the structure of the table jobs and InnoDB Engine have been used to create the table jobs.

CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID integer NOT NULL UNIQUE PRIMARY KEY, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT NULL
)ENGINE=InnoDB;


+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| JOB_ID     | int(11)      | NO   | PRI | NULL    |       |
| JOB_TITLE  | varchar(35)  | NO   |     |         |       |
| MIN_SALARY | decimal(6,0) | YES  |     | 8000    |       |
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+

ans:-
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
EMAIL varchar(25) NOT NULL, 
PHONE_NUMBER varchar(20) DEFAULT NULL, 
HIRE_DATE date NOT NULL, 
JOB_ID varchar(10) NOT NULL, 
SALARY decimal(8,2) DEFAULT NULL, 
COMMISSION_PCT decimal(2,2) DEFAULT NULL, 
MANAGER_ID decimal(6,0) DEFAULT NULL, 
DEPARTMENT_ID decimal(4,0) DEFAULT NULL, 
FOREIGN KEY(DEPARTMENT_ID) 
REFERENCES  departments(DEPARTMENT_ID),
FOREIGN KEY(JOB_ID) 
REFERENCES  jobs(JOB_ID)
)ENGINE=InnoDB;

18. Write a SQL statement to create a table employees including columns employee_id, first_name, last_name, job_id, salary and make sure that, the employee_id column does not contain any duplicate value at the time of insertion, and the foreign key column job_id, referenced by the column job_id of jobs table, can contain only those values which are exists in the jobs table. The InnoDB Engine have been used to create the tables. The specialty of the statement is that, The ON DELETE CASCADE that lets you allow to delete records in the employees(child) table that refer to a record in the jobs(parent) table when the record in the parent table is deleted and the ON UPDATE RESTRICT actions reject any updates.

Assume that the structure of the table jobs and InnoDB Engine have been used to create the table jobs.

CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID integer NOT NULL UNIQUE PRIMARY KEY, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT NULL
)ENGINE=InnoDB;


+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| JOB_ID     | int(11)      | NO   | PRI | NULL    |       |
| JOB_TITLE  | varchar(35)  | NO   |     |         |       |
| MIN_SALARY | decimal(6,0) | YES  |     | 8000    |       |
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+

ans
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
JOB_ID INTEGER NOT NULL, 
SALARY decimal(8,2) DEFAULT NULL, 
FOREIGN KEY(JOB_ID) 
REFERENCES  jobs(JOB_ID) 
ON DELETE CASCADE ON UPDATE RESTRICT
)ENGINE=InnoDB;

19. Write a SQL statement to create a table employees including columns employee_id, first_name, last_name, job_id, salary and make sure that, the employee_id column does not contain any duplicate value at the time of insertion, and the foreign key column job_id, referenced by the column job_id of jobs table, can contain only those values which are exists in the jobs table. The InnoDB Engine have been used to create the tables. The specialty of the statement is that, The ON DELETE SET NULL action will set the foreign key column values in the child table(employees) to NULL when the record in the parent table(jobs) is deleted, with a condition that the foreign key column in the child table must accept NULL values and the ON UPDATE SET NULL action resets the values in the rows in the child table(employees) to NULL values when the rows in the parent table(jobs) are updated.

Assume that the structure of two table jobs and InnoDB Engine have been used to create the table jobs.

CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID integer NOT NULL UNIQUE PRIMARY KEY, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT NULL
)ENGINE=InnoDB;


+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| JOB_ID     | int(11)      | NO   | PRI | NULL    |       |
| JOB_TITLE  | varchar(35)  | NO   |     |         |       |
| MIN_SALARY | decimal(6,0) | YES  |     | 8000    |       |
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+

ans:-
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
JOB_ID INTEGER, 
SALARY decimal(8,2) DEFAULT NULL, 
FOREIGN KEY(JOB_ID) 
REFERENCES  jobs(JOB_ID)
ON DELETE SET NULL 
ON UPDATE SET NULL
)ENGINE=InnoDB;

20. Write a SQL statement to create a table employees including columns employee_id, first_name, last_name, job_id, salary and make sure that, the employee_id column does not contain any duplicate value at the time of insertion, and the foreign key column job_id, referenced by the column job_id of jobs table, can contain only those values which are exists in the jobs table. The InnoDB Engine have been used to create the tables. The specialty of the statement is that, The ON DELETE NO ACTION and the ON UPDATE NO ACTION actions will reject the deletion and any updates.

Assume that the structure of two table jobs and InnoDB Engine have been used to create the table jobs.

CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID integer NOT NULL UNIQUE PRIMARY KEY, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT NULL
)ENGINE=InnoDB;


+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| JOB_ID     | int(11)      | NO   | PRI | NULL    |       |
| JOB_TITLE  | varchar(35)  | NO   |     |         |       |
| MIN_SALARY | decimal(6,0) | YES  |     | 8000    |       |
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+

ans:-
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
JOB_ID INTEGER NOT NULL, 
SALARY decimal(8,2) DEFAULT NULL, 
FOREIGN KEY(JOB_ID) 
REFERENCES  jobs(JOB_ID)
ON DELETE NO ACTION 
ON UPDATE NO ACTION
)ENGINE=InnoDB;



-----------------------------------------------------------------------------------
joins:-


create table xtable(id int,xname varchar(20));
create table ytable(id int,yname varchar(20));
insert into ytable values(1,'y1');
insert into ytable values(2,'y2');
insert into ytable values(7,'y7');
insert into ytable values(4,'y4');
insert into ytable values(5,'y5');
insert into ytable values(8,'y8');
select xname,xtable.id,ytable.id,ynamefrom xtable inner join ytableon xtable.id=ytable.id;
select * from xtable cross join ytable;
select * from xtable;
select xname,xtable.id,ytable.id,ynamefrom xtable left outer join ytableon xtable.id=ytable.id;
select xname,xtable.id,ytable.id,ynamefrom xtable right outer join ytableon xtable.id=ytable.id;


select x1.xname,x2.xname from xtable As x1 , xtable As x2where x1.id=x2.id;

